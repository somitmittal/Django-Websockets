# Concurrency tuning:
# - ASGI workers: Set via `uvicorn --workers`. For I/O-bound (WebSockets, async views), 1-2 workers per CPU core is typical.
#   Example: `uvicorn app.asgi:application --host 0.0.0.0 --port 8000 --workers 4`
# - Thread-pool workers: Uvicorn uses async event loop (default: uvloop), so thread-pool is less relevant unless you have blocking code.
# - For CPU-bound tasks, increase workers; for I/O-bound (most Django Channels apps), fewer workers but more async tasks per worker is efficient.
# - See Django Channels ASYNC_CAPABLE docs for more: https://channels.readthedocs.io/en/stable/topics/consumers.html#async-consumers
version: '3.8'

services:
  app_blue:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn app.asgi:application --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings

  app_green:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn app.asgi:application --host 0.0.0.0 --port 8000
    ports:
      - "8001:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_active_connections.yml:/etc/prometheus/alert_active_connections.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  grafana-storage:
    driver: local